package com.qyf404.learn.algorithm;

import java.math.BigDecimal;

/**
 * 
 秦九韶算法又称霍纳算法。 一般地，一元n次多项式的求值需要经过[n（n+1）]/2次乘法和n次加法，
 * 而秦九韶算法只需要n次乘法和n次加法。在人工计算时，一次大大简化了运算过程。
 * 
 * Pn(x)= anx ^n+a(n－1)x^(n-1)+…+a1x+a0
 * 
 * 可简化成
 * 
 * Pn(x)= anx ^n+a(n－1)x^(n-1)+…+a1x+a0=((…(((anx +an－1)x+an－2)x+
 * an－3)…)x+a1)x+a0
 * 
 * @author qyfmac
 */
public class HornerAlgorithm {
	private double a[];
	private Double x;

	public HornerAlgorithm(double[] a, double x) {
		this.a = a;
		this.x = x;
	}
	public void check(){
		if(a == null || x == null || a.length < 1 ){
			throw new RuntimeException();
		}
	}
	
	/**
	 * 简单的for循环实现
	 * 
	 * 测试比较使用
	 * @return
	 */
	private double oldCompute() {
		check();
		double s = 0;
		for (int i = 0; i < a.length; i++) {
			s = s + Math.pow(x, i) * a[i];
		}
		return s;
	}
	/**
	 * 简单的for循环实现
	 * 
	 * 测试比较使用
	 * @return
	 */
	private BigDecimal oldCompute2BigDecimal() {
		check();
		BigDecimal x = new BigDecimal(this.x);
		BigDecimal s = new BigDecimal(0);
		for (int i = 0; i < a.length; i++) {
			s = s.add(x.pow(i).multiply(new BigDecimal(a[i])));
		}
		return s;
	}
	

	/**
	 * 秦九韶算法实现
	 * 
	 * @return
	 */
	public double compute() {
		check();
		
		int n = a.length -1;
		double s = a[n];
		
		if(n == 0){
			//f(x)=a0 的情况
			return s;
		}
		
		int i = 0;
		do{
			i++;
			s = a[n-i] + x * s;
			
		}while(i < n);
		
		
		return s;
	}
	/**
	 * 秦九韶算法实现
	 * 
	 * @return
	 */
	public BigDecimal compute2BigDecimal() {
		check();
		
		int n = a.length -1;
		BigDecimal s = new BigDecimal(a[n]);
		
		if(n == 0){
			//f(x)=a0 的情况
			return s;
		}
		BigDecimal x = new BigDecimal(this.x);
		int i = 0;
		do{
			i++;
			s = new BigDecimal(a[n-i]).add(s.multiply(x));
			
		}while(i < n);
		
		
		return s;
	}

	public static void main(String[] args) {
//		double a[] ={1};
//		double a[] ={1,1};
//		double a[] ={1,1,1};
//		double a[] ={1,1,1,2};
		double a[] = { 1 ,111.3 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,111 ,11};
		double x = 2;
		HornerAlgorithm ha = new HornerAlgorithm(a, x);

		{
			long start = System.currentTimeMillis();
			BigDecimal s = ha.oldCompute2BigDecimal();
			long end = System.currentTimeMillis();
			System.out.println("耗时" + (end - start) + "结果为" + s);
		}
		{
			long start = System.currentTimeMillis();
			BigDecimal s = ha.compute2BigDecimal();
			long end = System.currentTimeMillis();
			System.out.println("耗时" + (end - start) + "结果为" + s);
		}
		
		double c1 = Math.pow(a.length,2);
		double c2 = 2*a.length;
		
		System.out.println(Math.pow(a.length,2));
		System.out.println(2*a.length);
		System.out.println(c1/c2);

	}
}
